import qdarkgraystyle  # https://pypi.org/project/qdarkgraystyle/

from QtWorker import Worker
from PyQt5.QtCore import QThreadPool
from gui import Ui_MainWindow  # generated by designer, DO NOT EDIT
import sys
import os
import logging
from PyQt5 import QtCore, QtGui  # conda install pyqt
from PyQt5 import QtWidgets
import pyqtgraph as pg  # Fast plot package
import numpy as np
import time

from myVMRSerial import myVMRSerial


# extend Ui_MainWindow class
class MyUi(Ui_MainWindow):
    """Initialize the app"""
    timerRefresh = QtCore.QTimer()
    refreshInterval_ms = 200
    refreshDelayP = 1
    refreshDelayI = 1

    bVisibleData = []

    vmr = False

    def __init__(self):
        super(MyUi, self).__init__()
        try:
            os.mkdir("log")
        except Exception as e:
            pass
        logging.basicConfig(filename='log/app.log')

        self.threadpool = QThreadPool()
        print("Multithreading with maximum %d threads" % self.threadpool.maxThreadCount())

        self.vmr = myVMRSerial()
        self.readVMRWorker()



        # self.timerRefresh = QtCore.QTimer(self)  # make timer to belong to the MainForm class
        self.timerRefresh.setInterval(self.refreshInterval_ms)
        self.timerRefresh.timeout.connect(self.refreshData)
        self.vmr.ser.reset_input_buffer()
        self.timerRefresh.start()

    """
    override function of the parent class to connect actions and buttons
    set user interface
    """
    def setupUi(self, MainWindow):
        super(MyUi, self).setupUi(MainWindow)  # call function of the parent class

        self.PlotWindow = pg.GraphicsLayoutWidget()
        containing_layout = self.BxPlotPlaceholder.parent().layout()
        containing_layout.replaceWidget(self.BxPlotPlaceholder, self.PlotWindow)

        layout = pg.GraphicsLayout()  # l = pg.GraphicsLayout(border=(100,100,100))

        self.BxPlot = layout.addPlot()
        layout.nextRow()
        self.ByPlot = layout.addPlot()
        layout.nextRow()
        self.BzPlot = layout.addPlot()
        self.PlotWindow.setCentralItem(layout)

        self.ProjectionPlotWindow = pg.GraphicsLayoutWidget()
        containing_layout = self.AplaceholderWidget.parent().layout()
        containing_layout.replaceWidget(self.AplaceholderWidget, self.ProjectionPlotWindow)
        layoutP = pg.GraphicsLayout()

        self.XYPlot = layoutP.addPlot()

        self.XZPlot = layoutP.addPlot()

        self.YZPlot = layoutP.addPlot()

        self.ProjectionPlotWindow.setCentralItem(layoutP)
        for p in [self.XYPlot, self.XZPlot, self.YZPlot]:
            p.setFixedWidth(300)
            p.setFixedHeight(300)


        """
        d = np.linspace(0, 100, 100)
        self.BxPlot.plot(d, symbol='o')
        """

        # add slots and signals
        self.pauseButton.clicked.connect(lambda: self.pausePlay())
        self.SaveVisibleButton.clicked.connect(lambda: self.saveVisible())

    def refreshData(self):
        self.plotData()

    def saveVisible(self):
        print("Save visible data")
        fileNameTempl = "data/dataVMR.npy"
        fileName = fileNameTempl
        try:
            i = 0
            while os.path.isfile(fileName):
                fileName = fileNameTempl[:-4] + "_" + str(i) + fileNameTempl[-4:]
                i += 1
                #print(fileName)
            np.save(fileName, self.bVisibleData)
            print("File: {} saved.".format(fileName))
        except Exception as e:
            print(e)
            print(fileName)
            print(os.curdir())


    def pausePlay(self):
        if self.pauseButton.isChecked():
            print("Pause ")
            self.pauseButton.setText("Start")
            self.timerRefresh.stop()
        else:
            print("Start")
            self.pauseButton.setText("Pause")
            self.timerRefresh.start()

    def readVMRWorker(self):
        try:

            worker = Worker(self.vmr.readData)  # Any other args, kwargs are passed to the run function
            worker.signals.result.connect(self.readDataResult)
            worker.signals.finished.connect(self.readDataComplete)
            worker.signals.progress.connect(self.readDataProgress)

            # Execute
            self.threadpool.start(worker)
        except Exception as e:
            print("readDataData exception: ", e)

    def readDataResult(self, res):
        pass

    def readDataComplete(self):
        pass

    def readDataProgress(self, n):
        pass

    def plotLabelFormat(self, label, unit, fontSize=18, color=(150, 150, 150)):
        return "<span style='font-size: " + str(fontSize) + "px; color: rgb" + str(color) + "'>" + label + unit + "</span>"

    def valueLabelFormat(self, label, unit='', color=(150, 150, 150)):
        return "<span style='color: rgb" + str(color) + "'>" + label + unit + "</span>"

    def plotData(self):
        # print("refreshData")

        unit = " (nT)"
        fontSize = 18
        colorX = (100, 200, 250)
        colorY = (100, 250, 200)
        colorZ = (250, 100, 200)



        self.timerRefresh.stop()
        try:
            b = np.array(self.vmr.cbB)
            self.bVisibleData = b
            bx = b[:, 0]
            by = b[:, 1]
            bz = b[:, 2]
            n = len(bx)
            if n < 5:
                return
            #timeB = np.linspace(-n/100, 0, n)
            timeB = np.linspace(0, n / 100, n)

            penX = pg.mkPen(colorX, width=2, style=QtCore.Qt.SolidLine)
            self.BxPlot.clear()
            self.BxPlot.plot(timeB, bx, pen=penX)
            self.BxPlot.setLabel('left', self.plotLabelFormat("Bx", unit, fontSize=fontSize, color=colorX))

            penY = pg.mkPen(colorY, width=2, style=QtCore.Qt.SolidLine)
            self.ByPlot.clear()
            self.ByPlot.plot(timeB, by, pen=penY)
            self.ByPlot.setLabel('left', self.plotLabelFormat("By", unit, fontSize=fontSize, color=colorY))

            penZ = pg.mkPen(colorZ, width=2, style=QtCore.Qt.SolidLine)
            self.BzPlot.clear()
            self.BzPlot.plot(timeB, bz, pen=penZ)
            self.BzPlot.setLabel('left', self.plotLabelFormat("Bz", unit, fontSize=fontSize, color=colorZ))

            bxmean = np.mean(bx[-self.meanSpinBox.value():])
            bymean = np.mean(by[-self.meanSpinBox.value():])
            bzmean = np.mean(bz[-self.meanSpinBox.value():])
            btmean = np.sqrt(bxmean**2+bymean**2+bzmean**2)
            bxstd = np.std(bx)
            bystd = np.std(by)
            bzstd = np.std(bz)
            self.BxLabel.setText(self.valueLabelFormat("{:,.2f}".format(bxmean).replace(',', ' '), color=colorX))
            self.ByLabel.setText(self.valueLabelFormat("{:,.2f}".format(bymean).replace(',', ' '), color=colorY))
            self.BzLabel.setText(self.valueLabelFormat("{:,.2f}".format(bzmean).replace(',', ' '), color=colorZ))

            self.BxsLabel.setText(self.valueLabelFormat("{:,.2f}".format(bxstd).replace(',', ' '), color=colorX))
            self.BysLabel.setText(self.valueLabelFormat("{:,.2f}".format(bystd).replace(',', ' '), color=colorY))
            self.BzsLabel.setText(self.valueLabelFormat("{:,.2f}".format(bzstd).replace(',', ' '), color=colorZ))
            self.BusLabel.setText(self.valueLabelFormat("{:,.2f}".format(bxstd+bystd+bzstd).replace(',', ' '), color=colorZ))

            self.BtLabel.setText("{:,.2f}".format(btmean).replace(',', ' '))

            p = np.array(self.vmr.cbP)
            self.PLabel.setText("{:,.3f}".format(np.mean(p[-10:])).replace(',', ' '))

            self.XYPlot.setLabel('bottom', self.plotLabelFormat("By", unit, fontSize=fontSize, color=colorY))
            self.XYPlot.setLabel('left', self.plotLabelFormat("Bx", unit, fontSize=fontSize, color=colorX))
            self.XZPlot.setLabel('bottom', self.plotLabelFormat("Bz", unit, fontSize=fontSize, color=colorZ))
            self.XZPlot.setLabel('left', self.plotLabelFormat("Bx", unit, fontSize=fontSize, color=colorX))
            self.YZPlot.setLabel('bottom', self.plotLabelFormat("By", unit, fontSize=fontSize, color=colorY))
            self.YZPlot.setLabel('left', self.plotLabelFormat("Bz", unit, fontSize=fontSize, color=colorZ))

            mx = np.array([np.mean(b[-10:, 0])])
            my = np.array([np.mean(b[-10:, 1])])
            mz = np.array([np.mean(b[-10:, 2])])

            bxs = bx[-100:-10:10]
            bys = by[-100:-10:10]
            bzs = bz[-100:-10:10]

            maxx = 1.1 * np.max(np.abs(bxs))
            maxz = 1.1 * np.max(np.abs(bzs))
            maxy = 1.1 * np.max(np.abs(bys))

            maxyz = np.sqrt(maxx**2 + maxz**2 + maxy**2)
            for p in [self.XYPlot, self.XZPlot, self.YZPlot]:
                p.clear()
                p.setXRange(-maxyz, maxyz, padding=0)
                p.setYRange(-maxyz, maxyz, padding=0)

            self.XYPlot.plot(bys, bxs, symbol='o')
            self.XYPlot.plot(my, mx, symbol='+')
            #self.XYPlot.setXRange(-maxxy, maxxy, padding=0)
            #self.XYPlot.setYRange(-maxxy, maxxy, padding=0)

            self.XZPlot.plot(bzs, bxs, symbol='o')
            self.XZPlot.plot(mz, mx, symbol='+')
            #self.XZPlot.setXRange(-maxxz, maxxz, padding=0)
            #self.XZPlot.setYRange(-maxxz, maxxz, padding=0)

            self.YZPlot.plot(bys, bzs, symbol='o')
            self.YZPlot.plot(my, mz, symbol='+')
            #self.YZPlot.setXRange(-maxyz, maxyz, padding=0)
            #self.YZPlot.setYRange(-maxyz, maxyz, padding=0)

        except Exception as e:
            print("Plot error: " + str(e))
            # print(bx)
            pass
        finally:
            wb = self.vmr.ser.in_waiting
            #print("Buffer size: ", wb)
            setSize = 500
            self.refreshInterval_ms += self.refreshDelayI * (wb - setSize)
            if self.refreshInterval_ms < 200:
                self.refreshInterval_ms = 200
            if self.refreshInterval_ms > 1000:
                self.refreshInterval_ms = 300
            #print("Delay: ", self.refreshInterval_ms)

            if not self.pauseButton.isChecked():
                self.timerRefresh.start(self.refreshInterval_ms)

    def closeEvent(self, e):
        print("Close")
        return True


##############################################################################################
#
#                    Start the app
#
##############################################################################################
def main():
    app = QtWidgets.QApplication(sys.argv)
    app.setStyleSheet(qdarkgraystyle.load_stylesheet())
    MainWindow = QtWidgets.QMainWindow()
    ui = MyUi()
    ui.setupUi(MainWindow)
    MainWindow.show()

    sys.exit(app.exec_())
    # del MainWindow
    MainWindow.close()
    print("app.end")
    #ui.vmr.readThread.join()
    ui.threadpool.clear()


if __name__.endswith('__main__'):
    main()